local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer

local function setupWallhop(character)
	local humanoid = character:WaitForChild("Humanoid")
	local hrp = character:WaitForChild("HumanoidRootPart")
	local camera = workspace.CurrentCamera

	-- GUI
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "WallhopGUI"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = player:WaitForChild("PlayerGui")

	local button = Instance.new("TextButton")
	button.Size = UDim2.new(0, 120, 0, 50)
	button.Position = UDim2.new(0, 10, 1, -70)
	button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	button.TextColor3 = Color3.new(1, 1, 1)
	button.Font = Enum.Font.GothamBold
	button.TextScaled = true
	button.Text = "Wallhop: OFF"
	button.Parent = screenGui
	button.Active = true
	button.Draggable = true

	local enabled = false
	local isWallhopping = false

	button.MouseButton1Click:Connect(function()
		enabled = not enabled
		button.Text = enabled and "Wallhop: ON" or "Wallhop: OFF"
	end)

	local function rotateCameraInstant(degrees)
		local originalCFrame = camera.CFrame
		camera.CFrame = originalCFrame * CFrame.Angles(0, math.rad(degrees), 0)
		task.wait(0.05)
		camera.CFrame = originalCFrame
	end

	RunService.Heartbeat:Connect(function()
		if not enabled or isWallhopping then return end
		if humanoid.FloorMaterial ~= Enum.Material.Air then return end

		local rayOrigin = hrp.Position - Vector3.new(0, 2, 0)
		local directions = {
			Vector3.new(0, 0, -1),
			Vector3.new(0, 0, 1),
			Vector3.new(-1, 0, 0),
			Vector3.new(1, 0, 0)
		}

		local nearbyParts = {}
		for _, dir in ipairs(directions) do
			local result = workspace:Raycast(rayOrigin, dir * 1.5, RaycastParams.new())
			if result and result.Instance:IsA("BasePart") then
				table.insert(nearbyParts, result.Instance)
			end
		end

		if #nearbyParts >= 2 then
			local p1, p2 = nearbyParts[1], nearbyParts[2]
			if p1.BrickColor ~= p2.BrickColor and (p1.Position - p2.Position).Magnitude <= 0.5 then
				isWallhopping = true
				humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
				coroutine.wrap(function()
					rotateCameraInstant(90)
					task.wait(0.1)
					isWallhopping = false
				end)()
			end
		end
	end)
end

-- Initial run
if player.Character then
	setupWallhop(player.Character)
end

player.CharacterAdded:Connect(setupWallhop)
