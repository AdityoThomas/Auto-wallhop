local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()

local function setupWallhop(character)
	local humanoid = character:WaitForChild("Humanoid")
	local hrp = character:WaitForChild("HumanoidRootPart")
	local camera = workspace.CurrentCamera

	local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
	screenGui.Name = "SmartWallhopGUI"
	screenGui.ResetOnSpawn = false

	local toggleBtn = Instance.new("TextButton")
	toggleBtn.Size = UDim2.new(0, 130, 0, 50)
	toggleBtn.Position = UDim2.new(0, 10, 1, -60)
	toggleBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
	toggleBtn.TextColor3 = Color3.new(1, 1, 1)
	toggleBtn.Font = Enum.Font.GothamBold
	toggleBtn.TextScaled = true
	toggleBtn.Text = "Wallhop: OFF"
	toggleBtn.Parent = screenGui
	toggleBtn.Active = true
	toggleBtn.Draggable = true

	local wallhopEnabled = false
	local isWallhopping = false

	toggleBtn.MouseButton1Click:Connect(function()
		wallhopEnabled = not wallhopEnabled
		toggleBtn.Text = wallhopEnabled and "Wallhop: ON" or "Wallhop: OFF"
	end)

	RunService.Heartbeat:Connect(function()
		if not wallhopEnabled or isWallhopping then return end
		if humanoid.FloorMaterial ~= Enum.Material.Air then return end

		local origin = hrp.Position
		local direction = hrp.CFrame.LookVector * 3

		local rayParams = RaycastParams.new()
		rayParams.FilterDescendantsInstances = {character}
		rayParams.FilterType = Enum.RaycastFilterType.Blacklist

		local result1 = workspace:Raycast(origin, direction, rayParams)
		if not result1 then return end

		local nearOrigin = origin + hrp.CFrame.LookVector * 0.5
		local nearbyResult = workspace:Raycast(nearOrigin, hrp.CFrame.RightVector * 1, rayParams)

		if nearbyResult and result1.Instance and nearbyResult.Instance then
			local partA = result1.Instance
			local partB = nearbyResult.Instance

			if partA:IsA("BasePart") and partB:IsA("BasePart") and partA ~= partB then
				local colorA = partA.Color
				local colorB = partB.Color

				local distance = (partA.Position - partB.Position).Magnitude

				if colorA ~= colorB and distance <= 4 then
					isWallhopping = true
					humanoid:ChangeState(Enum.HumanoidStateType.Jumping)

					task.wait(0.05)
					isWallhopping = false
				end
			end
		end
	end)
end

setupWallhop(char)
player.CharacterAdded:Connect(setupWallhop)
